#compdef gradle gradlew gw

__gradle-set-project-root-dir() {
    local dir=`pwd`
    project_root_dir=`pwd`
    while [[ $dir != '/' ]]; do
        if [[ -f "$dir/settings.gradle" || -f "$dir/settings.gradle.kts" || -f "$dir/gradlew" ]]; then
            project_root_dir=$dir
            return 0
        fi
        dir="$(dirname "$dir")"
    done
    return 1
}

__gradle-init-cache-dir() {
    cache_dir="${GRADLE_USER_HOME:-$HOME/.gradle}/completion"
    mkdir -p $cache_dir
}

__gradle-set-settings-file() {
    # In order of precedence: --settings-file=filename, settings.gradle, settings.gradle.kts

    local default_gradle_settings_file="$project_root_dir/settings.gradle"
    if [[ ! -f $default_gradle_settings_file ]]; then
      default_gradle_settings_file="$project_root_dir/settings.gradle.kts"
    fi
    gradle_settings_file=${${(v)opt_args[(i)-c|--settings-file]}:-$default_gradle_settings_file}
}

__gradle-set-build-file() {
    __gradle-set-settings-file
    # In order of precedence: --build-file=filename, rootProject.buildFileName, build.gradle, build.gradle.kts

    local default_gradle_build_file_name="build.gradle"
    if [[ -r $gradle_settings_file ]]; then
        default_gradle_build_file_name=${$(grep "^rootProject\.buildFileName" $gradle_settings_file | \
            sed -n -e "s/rootProject\.buildFileName = [\'\"]\(.*\)[\'\"]/\1/p")}

        default_gradle_build_file_name="${default_gradle_build_file:-build.gradle}"
    fi

    local default_gradle_build_file="$project_root_dir/$default_gradle_build_file_name"
    if [[ ! -f $default_gradle_build_file ]]; then
        default_gradle_build_file="$project_root_dir/build.gradle.kts"
    fi

    # If a build file is specified after '-b' or '--build-file', use this file.
    gradle_build_file=${${(v)opt_args[(i)-b|--build-file]}:-$default_gradle_build_file}
}

__gradle-set-cache-name() {
    # Cache name is constructed from the absolute path of the build file.
    cache_name=${${gradle_build_file:a}//[^[:alnum:]]/_}
}

__gradle-set-files-checksum() {
    # Cache MD5 sum of all Gradle scripts and modified timestamps
    if builtin command -v md5 > /dev/null; then
        gradle_files_checksum=( $(md5 -q -s "$(cat "$cache_dir/$cache_name" | xargs ls -o 2>/dev/null)") )
    elif builtin command -v md5sum > /dev/null; then
        gradle_files_checksum=( $(cat "$cache_dir/$cache_name" | xargs ls -o 2>/dev/null | md5sum | awk '{print $1}') )
    else
        _message 'Cannot generate completions as neither md5 nor md5sum exist on \$PATH'
        return 1
    fi
}

__gradle-generate-script-cache() {
    # Invalidate cache after 3 weeks by default
    local cache_ttl_mins=${$(echo $GRADLE_CACHE_TTL_MINUTES):-30240}
    local script_exclude_pattern=${$(echo $GRADLE_COMPLETION_EXCLUDE_PATTERN):-"/(.git|build|integTest|samples|templates|smokeTest|testFixtures|out)/"}
    if [[ ! $(find $cache_dir/$cache_name -mmin -$cache_ttl_mins 2>/dev/null) ]]; then
        zle -R "Generating Gradle build script cache"
        # Cache all Gradle scripts
        local -a gradle_build_scripts
        gradle_build_scripts=( $(find $project_root_dir -type f -name "*.gradle" -o -name "*.gradle.kts" 2>/dev/null | grep -E -v "$script_exclude_pattern") )
        printf "%s\n" "${gradle_build_scripts[@]}" >| $cache_dir/$cache_name
    fi
}

__gradle-generate-tasks-cache() {
    __gradle-set-files-checksum

    # Use Gradle wrapper when it exists.
    local gradle_cmd="gradle"
    if [[ -x "$project_root_dir/gradlew" ]]; then
        gradle_cmd="$project_root_dir/gradlew"
    fi

    zle -R "Generating Gradle task cache from $gradle_build_file"

    # Run gradle to retrieve possible tasks and cache.
    # Reuse Gradle Daemon if IDLE but don't start a new one.
    local gradle_tasks_output
    if [[ ! -z "$($gradle_cmd --status 2>/dev/null | grep IDLE)" ]]; then
        gradle_tasks_output="$($gradle_cmd --daemon --no-scan --build-file $gradle_build_file --console=plain -q tasks --all 2>/dev/null)"
    else
        gradle_tasks_output="$($gradle_cmd --no-daemon --no-scan --build-file $gradle_build_file --console=plain -q tasks --all 2>/dev/null)"
    fi
    local gradle_all_tasks="" root_tasks="" subproject_tasks="" output_line
    local -a match
    for output_line in ${(f)"$(printf "%s\n" "${gradle_tasks_output[@]}")"}; do
        if [[ $output_line =~ ^([[:alpha:]][[:alnum:][:punct:]]*)([[:space:]]-[[:space:]]([[:print:]]*))? ]]; then
            local task_name="${match[1]}"
            local task_description="${match[3]}"
            # Completion for subproject tasks with ':' prefix
            if [[ $task_name =~ ^([[:alnum:][:punct:]]+):([[:alnum:]]+) ]]; then
                gradle_all_tasks+="${task_name//:/\\:}:$task_description\n\\:${task_name//:/\\:}:$task_description\n"
                subproject_tasks+="${match[2]}\n"
            else
                gradle_all_tasks+="${task_name//:/\\:}:$task_description\n"
                root_tasks+="$task_name\n"
            fi
        fi
    done

    # subproject tasks can be referenced implicitly from root project
    if [[ $GRADLE_COMPLETION_UNQUALIFIED_TASKS == "true" ]]; then
        local -a implicit_tasks
        implicit_tasks=( $(comm -23 <(echo $subproject_tasks | sort) <(echo $root_tasks | sort)) )
        for task in $(printf "%s\n" "${implicit_tasks[@]}"); do
            gradle_all_tasks+="$task\n"
        done
    fi

    echo $gradle_all_tasks >| $cache_dir/$gradle_files_checksum
    echo $gradle_files_checksum >| $cache_dir/$cache_name.md5
}

__gradle-completion-init() {
    local cache_dir cache_name gradle_build_file gradle_files_checksum project_root_dir
    __gradle-init-cache-dir
    __gradle-set-project-root-dir
    __gradle-set-build-file
    if [[ -f $gradle_build_file ]]; then
        __gradle-set-cache-name
        __gradle-generate-script-cache
        __gradle-set-files-checksum
        __gradle-generate-tasks-cache
    fi
    return 0
}

__gradle_tasks() {
    local cache_dir cache_name gradle_build_file gradle_files_checksum project_root_dir

    __gradle-init-cache-dir
    __gradle-set-project-root-dir
    __gradle-set-build-file
    if [[ -f $gradle_build_file ]]; then
        __gradle-set-cache-name
        __gradle-generate-script-cache
        __gradle-set-files-checksum

        # The cache key is md5 sum of all gradle scripts, so it's valid if it exists.
        if [[ -f $cache_dir/$cache_name.md5 ]]; then
            local cached_checksum="$(cat $cache_dir/$cache_name.md5)"
            local -a cached_tasks
            if [[ -z $cur ]]; then
                cached_tasks=(${(f)"$(grep -v "^\\\:" $cache_dir/$cached_checksum)"})
            else
                cached_tasks=(${(f)"$(grep "^${cur//:/\\\\:}" $cache_dir/$cached_checksum)"})
            fi
            _describe 'all tasks' cached_tasks && ret=0
        else
            __gradle-generate-tasks-cache
        fi

        # Regenerate tasks cache in the background
        if [[ $gradle_files_checksum != "$(cat $cache_dir/$cache_name.md5)" || ! -f $cache_dir/$gradle_files_checksum || $(wc -c < $cache_dir/$gradle_files_checksum) -le 1 ]]; then
            $(__gradle-generate-tasks-cache &> /dev/null &)
        fi
    else
        _describe 'built-in tasks' '(
            "buildEnvironment:Displays all buildscript dependencies declared in root project."
            "components:Displays the components produced by root project."
            "dependencies:Displays all dependencies declared in root project."
            "dependencyInsight:Displays the insight into a specific dependency in root project."
            "dependentComponents:Displays the dependent components of components in root project."
            "help:Displays a help message."
            "init:Initializes a new Gradle build."
            "model:Displays the configuration model of root project."
            "projects:Displays the sub-projects of root project."
            "properties:Displays the properties of root project."
            "tasks:Displays the tasks runnable from root project."
            "wrapper:Generates Gradle wrapper files."
            )' && ret=0
    fi
}

__gradle_subcommand() {
    integer ret=1

    case "$words[1]" in
        (dependencies)
            _arguments \
                '--configuration=[The configuration to generate the report for.]:dependency configuration:_gradle_dependency_configurations' && ret=0
            ;;
        (dependencyInsight)
            _arguments \
                '--dependency=[Shows the details of given dependency.]' \
                '--configuration=[Looks for the dependency in given configuration.]:dependency configuration:_gradle_dependency_configurations' && ret=0
            ;;
        (help)
            _arguments \
                '--task[The task to show help for.]' && ret=0
            ;;
        (init)
            _arguments \
                '--dsl=[DSL to be used in generated scripts.]:dsl:(groovy kotlin)' \
                '--package=[Package for the generated source.]' \
                '--project-name=[Name of the generated project.]' \
                '--test-framework=[Test framework to be used.]:test framework:(junit kotlintest scalatest spock testng)' \
                '--type=[Project type to generate.]:project type:(basic cpp-application cpp-library groovy-application groovy-library java-application java-library kotlin-application kotlin-library pom scala-library)' && ret=0
            ;;
        (tasks)
            _arguments \
                '--all[List all tasks, including subproject tasks.]' \
                '--group=[Show tasks only from given task group.]' && ret=0
            ;;
        (test)
            _arguments -C \
                '--debug-jvm[Enable debugging for the test process. The process is started suspended and listening on port 5005. Requires the "java" plugin.]' \
                '--fail-fast[Stops test execution after the first failed test. Requires the "java" plugin.]' \
                '--tests=[Sets test class or method name to be included, * is supported. Requires the "java" plugin.]' \
                '(-)*:: :->task-or-option' && ret=0
            ;;
        (wrapper)
            _arguments \
                '--distribution-type=[Binary-only or all with docs and sources]:*:distribution type:(bin all)' \
                '--gradle-version=[Set Gradle version for wrapper]' \
                '--gradle-distribution-sha256-sum=[SHA-256 checksum]' \
                '--gradle-distribution-url=[Set Gradle distribution URL]' && ret=0
            ;;
        (*)
            _arguments -C \
                {{GENERATED_ZSH_SUBCOMMAND_OPTIONS}} && ret=0
            ;;
    esac

    return ret
}

(( $+functions[_gradle_dependency_configurations] )) ||
_gradle_dependency_configurations() {
    local configurations
    configurations=(
        'compileClasspath'
        'runtimeClasspath'
        'testCompileClasspath'
        'testRuntimeClasspath'
    )
    _describe -t 'dependency configurations' "dependency configuration" configurations
}

_gradle() {
    local cur=${words[CURRENT]}
    local curcontext="$curcontext" state
    integer ret=1
    typeset -A opt_args

    _arguments -C \
{{GENERATED_ZSH_MAIN_OPTIONS}}        '(-)*:: :->task-or-option' && ret=0

    if [[ $words[CURRENT] != -* && $state != "argument-expected" ]]; then
        __gradle_tasks && ret=0
    else
        curcontext=${curcontext%:*:*}:gradle-$words[1]:
        __gradle_subcommand && ret=0
    fi

    return ret
}

_gradle "$@"
